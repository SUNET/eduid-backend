import logging
from datetime import date
from typing import Optional

from pydantic import Field

from eduid.common.models.saml_models import BaseSessionInfo, SAMLAttributes
from eduid.userdb.identity import PridPersistence

__author__ = "lundberg"


logger = logging.getLogger(__name__)


class NinAttributes(SAMLAttributes):
    nin: str = Field(alias="personalIdentityNumber")
    given_name: str = Field(alias="givenName")
    surname: str = Field(alias="sn")
    display_name: Optional[str] = Field(default=None, alias="displayName")
    date_of_birth: date = Field(alias="dateOfBirth")


class ForeignEidAttributes(SAMLAttributes):
    # The prid attribute is designed to provide one common unique attribute of the user in a common format regardless
    # of the composition of the original attributes received from the authenticating source.
    prid: str
    prid_persistence: PridPersistence = Field(alias="pridPersistence")
    # The Unique Identifier (eidasPersonIdentifier) shall remain unchanged for the lifetime of the account
    # (as created by the underlying scheme or generated by the sending Node). A Unique Identifier shall never be
    # reused, e.g. a new Unique Identifier shall not match a Unique Identifier that has been deleted.
    # Any service that consumes assertions of identity must assume that the Unique Identifier
    # presented for a particular person may change over time e.g. where the userâ€™s digital identity is
    # replaced or repaired. This should be handled by a consuming service using the same
    # matching process as used when an identity is first encountered utilising the Minimum Data
    # Set to identify the Principal within the service.
    eidas_person_identifier: str = Field(alias="eidasPersonIdentifier")
    date_of_birth: date = Field(alias="dateOfBirth")
    given_name: str = Field(alias="givenName")
    surname: str = Field(alias="sn")
    country_code: str = Field(alias="c")
    transaction_identifier: str = Field(alias="transactionIdentifier")
    # there are plans for a service in the future that provides the attributes below for
    # swedish citizens living abroad with eID from the country of residence
    mapped_personal_identity_number: Optional[str] = Field(alias="mappedPersonalIdentityNumber", default=None)
    personal_identity_number_binding: Optional[str] = Field(alias="personalIdentityNumberBinding", default=None)


class NinSessionInfo(BaseSessionInfo):
    attributes: NinAttributes = Field(alias="ava")


class ForeignEidSessionInfo(BaseSessionInfo):
    attributes: ForeignEidAttributes = Field(alias="ava")
