from unittest import TestCase

from eduid.common.testing_base import normalised_data
from eduid.userdb.fixtures.users import UserFixtures
from eduid.userdb.idp.user import SUPPORTED_SAML_ATTRIBUTES, IdPUser, SAMLAttributeSettings
from eduid.webapp.idp.assurance_data import EduidAuthnContextClass

__author__ = "lundberg"


class TestIdpUser(TestCase):
    def setUp(self):
        super().setUp()
        self.saml_attribute_settings = SAMLAttributeSettings(
            default_eppn_scope="example.com",
            default_country_code="se",
            default_country="Sweden",
            sp_entity_categories=["https://myacademicid.org/entity-categories/esi"],
            sp_subject_id_request=["subject-id"],
            esi_ladok_prefix="test-prefix",
            authn_context_class=EduidAuthnContextClass.PASSWORD_PT,
        )

    def test_supported_attributes(self):
        idp_user = IdPUser.from_dict(UserFixtures().mocked_user_standard.to_dict())
        attributes = idp_user.to_saml_attributes(settings=self.saml_attribute_settings, filter_attributes=[])
        assert list(attributes.keys()) == list(SUPPORTED_SAML_ATTRIBUTES.keys())

    def test_idp_user_to_attributes_all(self):
        idp_user = IdPUser.from_dict(UserFixtures().mocked_user_standard.to_dict())
        attributes = idp_user.to_saml_attributes(settings=self.saml_attribute_settings)

        for key in SUPPORTED_SAML_ATTRIBUTES:
            if key == "eduPersonTargetedID":
                # eduPersonTargetedID is generated by the IdP
                continue
            if key in ["pairwise-id", "subject-id"]:
                # most of the time we will have one or the other
                pairwise_id = attributes.get("pairwise-id")
                subject_id = attributes.get("subject-id")
                if any([pairwise_id, subject_id]):
                    continue
            self.assertIsNotNone(attributes.get(key), f"{key} is unexpectedly None")

        expected = {
            "c": "se",
            "cn": "John Smith",
            "co": "Sweden",
            "displayName": "John Smith",
            "eduPersonAssurance": ["http://www.swamid.se/policy/assurance/al2"],
            "eduPersonEntitlement": ["urn:mace:eduid.se:role:admin", "urn:mace:eduid.se:role:student"],
            "eduPersonOrcid": "https://op.example.org/user_orcid",
            "eduPersonPrincipalName": "hubba-bubba@example.com",
            "givenName": "John",
            "mail": "johnsmith@example.com",
            "mailLocalAddress": ["johnsmith2@example.com", "johnsmith@example.com"],
            "norEduPersonLegalName": "John Smith",
            "norEduPersonNIN": "197801011234",
            "personalIdentityNumber": "197801011234",
            "preferredLanguage": "en",
            "schacDateOfBirth": "19780101",
            "schacPersonalUniqueCode": f"{self.saml_attribute_settings.esi_ladok_prefix}{idp_user.ladok.external_id}",
            "sn": "Smith",
            "subject-id": f"{idp_user.eppn}@{self.saml_attribute_settings.default_eppn_scope}",
        }
        assert normalised_data(expected) == normalised_data(attributes), f"expected did not match {attributes}"

    def test_idp_user_chosen_given_name(self):
        idp_user = IdPUser.from_dict(UserFixtures().mocked_user_standard.to_dict())
        idp_user.given_name = "John Jack"
        idp_user.chosen_given_name = "Jack"

        # in Swamid chosen given name should be used for givenName, displayName and cn
        attributes = idp_user.to_saml_attributes(settings=self.saml_attribute_settings)
        assert attributes["givenName"] == "Jack"
        assert attributes["displayName"] == "Jack Smith"
        assert attributes["cn"] == "Jack Smith"
        assert attributes["norEduPersonLegalName"] == "John Jack Smith"

        # in Sweden Connect the legal name should always be used
        self.saml_attribute_settings.authn_context_class = EduidAuthnContextClass.DIGG_LOA2
        attributes = idp_user.to_saml_attributes(settings=self.saml_attribute_settings)
        assert attributes["givenName"] == "John Jack"
        assert attributes["displayName"] == "John Jack Smith"
        assert attributes["cn"] == "John Jack Smith"
