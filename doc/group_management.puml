@startuml

title group_management

legend
    GROUPS_RESPONSE: {
        "member_of": [
            {"identifier": str, "display_name": str, "members": [], "owners": [{"identifier": str, "display_name": str}]},
        ],
        "owner_of": [
            {"identifier": str, "display_name": str, "members": [{"identifier": str, "display_name": str}], "owners": [{"identifier": str, "display_name": str}]}
        ]
    }

    ALL_INVITES: {
        "incoming": [
            {"display_name": str, "email_address": str, "group_identifier": str, "owners": [{"display_name": str, "identifier": str}]},
        ],
        "outgoing": [
            {"group_identifier": str, "member_invites": [{"email_address": str}], "owner_invites": [{"email_address": str}]}
        ]
    }

    OUTGOING_INVITES: {
        "outgoing": [
            {"group_identifier": str, "member_invites": [{"email_address": str}], "owner_invites": [{"email_address": str}]}
        ]
    }

    INCOMING_INVITES: {
        "incoming": [
            {"display_name": str, "email_address": str, "group_identifier": str, "owners": [{"display_name": str, "identifier": str}]},
        ]
    }

end legend
Client->"/all-data": GET
"/groups"->Client: {"payload": GROUPS_RESPONSE+ALL_INVITES}, 'type': "GET_GROUP_MANAGEMENT_ALL_DATA_SUCCESS"}
|||
Client->"/groups": GET
"/groups"->Client: {"payload": GROUPS_RESPONSE}, 'type': "GET_GROUP_MANAGEMENT_GROUPS_SUCCESS"}
|||
Client->"/create": POST {"display_name": str}
"/create"->Client: {"payload": GROUPS_RESPONSE, 'type': "POST_GROUP_MANAGEMENT_CREATE_SUCCESS"}
|||
Client->"/delete": POST {"group_identifier": str}
alt User is owner
    "/delete"->Client: {"payload": GROUPS_RESPONSE, 'type': "POST_GROUP_MANAGEMENT_DELETE_SUCCESS"}
else User does not exist
    "/delete"->Client: {"error": true, "payload": {"message": "group.user_does_not_exist"},"type":"POST_GROUP_MANAGEMENT_DELETE_FAIL"}
else User is not owner
    "/delete"->Client: {"error": true, "payload": {"message": "group.user_not_owner"},"type":"POST_GROUP_MANAGEMENT_DELETE_FAIL"}
end
|||
Client->"/remove-user": POST {"group_identifier": str, "user_identifier": str, "role": str}
alt User is owner or trying to remove self
    "/delete"->Client: {"payload": GROUPS_RESPONSE, 'type': "POST_GROUP_MANAGEMENT_REMOVE_USER_SUCCESS"}
else User does not exist
    "/remove-user"->Client: {"error": true, "payload": {"message": "group.user_does_not_exist"},"type":"POST_GROUP_MANAGEMENT_REMOVE_USER_FAIL"}
else Group does not exist
    "/remove-user"->Client: {"error": true, "payload": {"message": "group.group_not_found"},"type":"POST_GROUP_MANAGEMENT_REMOVE_USER_FAIL"}
else User not owner or not trying to remove self
    "/remove-user"->Client: {"error": true, "payload": {"message": "group.user_not_owner"},"type":"POST_GROUP_MANAGEMENT_REMOVE_USER_FAIL"}
else User to be removed does not exist
    "/remove-user"->Client: {"error": true, "payload": {"message": "group.user_to_be_removed_does_not_exist"},"type":"POST_GROUP_MANAGEMENT_REMOVE_USER_FAIL"}
else User to be removed is the last owner of the group
    "/remove-user"->Client: {"error": true, "payload": {"message": "group.can_not_remove_last_owner"},"type":"POST_GROUP_MANAGEMENT_REMOVE_USER_FAIL"}
end
|||
Client->"/invites/all": GET
"/invites/all"->Client: {"payload": ALL_INVITES, "type": "GET_GROUP_INVITE_INVITES_ALL_SUCCESS"}
|||
Client->"/invites/outgoing": GET
"/invites/outgoing"->Client: {"payload": OUTGOING_INVITES, "type": "GET_GROUP_INVITE_INVITES_OUTGOING_SUCCESS"}
|||
Client->"/invites/incoming": GET
"/invites/incoming"->Client: {"payload": INCOMING_INVITES, "type": "GET_GROUP_INVITE_INVITES_INCOMING_SUCCESS"}
|||
Client->"/invites/create": POST {"group_identifier": str, "email_address": str, "role": str}
alt User is owner
    "/invites/create"->Client: {"payload": OUTGOING_INVITES, "type": "POST_GROUP_INVITE_INVITES_CREATE_SUCCESS"}
else User does not exist
    "/invites/create"->Client: {"error": true, "payload": {"message": "group.user_does_not_exist"}, "type":"POST_GROUP_INVITE_INVITES_CREATE_FAIL"}
else User is not owner
    "/invites/create"->Client: {"error": true, "payload": {"message": "group.user_not_owner"}, "type":"POST_GROUP_INVITE_INVITES_CREATE_FAIL"}
end
|||
Client->"/invites/accept": POST {"group_identifier": str, "email_address": str, "role": str}
alt User is invited
    "/invites/accept"->Client: {"payload": INCOMING_INVITES, "type": "POST_GROUP_INVITE_INVITES_ACCEPT_SUCCESS"}
else User does not have email address verified
    "/invites/accept"->Client: {"error": true, "payload": {"message": "group.mail_address_not_verified"},"type":"POST_GROUP_INVITE_INVITES_ACCEPT_FAIL"}
else User is not invited
    "/invites/accept"->Client: {"error": true, "payload": {"message": "group.invite_not_found"},"type":"POST_GROUP_INVITE_INVITES_ACCEPT_FAIL"}
else Group does not exist
    "/invites/accept"->Client: {"error": true, "payload": {"message": "group.group_not_found"},"type":"POST_GROUP_INVITE_INVITES_ACCEPT_FAIL"}
end
|||
Client->"/invites/decline": POST {"group_identifier": str, "email_address": str, "role": str}
alt User declines invite
    "/invites/decline"->Client: {"payload": INCOMING_INVITES, "type": "POST_GROUP_INVITE_INVITES_DECLINE_SUCCESS"}
else User does not have email address verified
    "/invites/accept"->Client: {"error": true, "payload": {"message": "group.mail_address_not_verified"},"type":"POST_GROUP_INVITE_INVITES_DECLINE_FAIL"}
else User is not invited
    "/invites/accept"->Client: {"error": true, "payload": {"message": "group.invite_not_found"},"type":"POST_GROUP_INVITE_INVITES_DECLINE_FAIL"}
end
@enduml
