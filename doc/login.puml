@startuml
title login

legend
    WEBAUTHN_RESPONSE: {
        "credentialId": base64_str,
        "authenticatorData": base64_str,
        "clientDataJSON": base64_str,
        "signature": base64_str,
    }

    LOGIN_PROBLEMS: {
         "login.assurance_failure": "The backend failed to determine what to assert to the SP",
         "login.assurance_not_possible": "A SAML prerequisite could not be met",
         "login.bad_ref": "The 'ref' provided by the frontend could not be found",
         "login.credential_expired": "The credential hasn't been used for 18 months and is disabled",
         "login.general_failure": "Unspecified error in the backend, log reading is due",
         "login.mfa_auth_failed": "MFA authentication failed somehow",
         "login.no_sso_session": "The SSO session could not be found using the cookie provided by the browser",
         "login.not_available": "Bundle URL not set - this is a configuration error in backend",
         "login.not_implemented": "The backend failed to process the next-request, version mismatch?",
         "login.swamid_mfa_required": "The SP requires a 'confirmed' MFA token",
         "login.user_temporary_locked": "The user account is disabled until next month due to too many failed logins",
         "login.user_terminated": "The user is terminated, but can be re-activated by a password change",
         "login.wrong_credentials": "Some credential information in the request was obviously wrong, or missing",
         "login.wrong_user": "The user logging in is not the same as the one who created the session. Re-login is advised.",
         "eidas.authn_context_mismatch": "SAML error when using external MFA",
         "eidas.reauthn_expired": "External MFA took too long",
         "eidas.nin_not_matching": "External MFA was performed, but by another person than the one logging in",
    }
end legend


Client->"/next": POST {"ref": reference}
alt Not logged in
    "/next"->Client: {"payload":{"action": "USERNAMEPASSWORD", "target": "/pw_auth"}, "type":"POST_LOGIN_NEXT_SUCCESS"}
else ToU acceptance required
    "/next"->Client: {"payload":{"action": "TOU", "target": "/tou"}, "type":"POST_LOGIN_NEXT_SUCCESS"}
else MFA required
    "/next"->Client: {"payload":{"action": "MFA", "target": "/mfa_auth"}, "type":"POST_LOGIN_NEXT_SUCCESS"}
else Finished
    "/next"->Client: {"payload":{"action": "FINISHED", "target": "https://..."}, "type":"POST_LOGIN_NEXT_SUCCESS"}
else Login not possible
    "/next"->Client: {"error": true, "payload": {"message": LOGIN_PROBLEMS},"type": "POST_LOGIN_NEXT_FAIL"}
end
|||

Client->"/pw_auth": POST {"ref": reference, "username": username, "password", password}
alt Correct
    "/pw_auth"->Client: {"payload": {"finished": true}, "type": "POST_LOGIN_USERNAMEPW_SUCCESS"}
else Not correct
    "/pw_auth"->Client: {"error": true, "payload": {"message": "login.pw_auth_incorrect"}, "type": "POST_LOGIN_USERNAMEPW_FAIL"}
end
|||

Client->"/tou": POST {"ref": reference, "versions": ["2016-v1", "2021-v1"]}
alt Version acceptable to backend present
    "/tou"->Client: {"payload": {"finished": false, "version": version}, "type": "POST_LOGIN_TOU_SUCCESS"}
else No acceptable version present
    "/tou"->Client: {"error": true, "payload": {"message": "login.tou_not_acceptable"},"type": "POST_LOGIN_TOU_FAIL"}
end


Client->"/tou": POST {"ref": reference, "user_accepts": version}
alt Acceptable
    "/tou"->Client: {"payload": {"finished": true}, "type": "POST_LOGIN_TOU_SUCCESS"}
else Not acceptable
    "/tou"->Client: {"error": true, "payload": {"message": "login.tou_not_acceptable"},"type": "POST_LOGIN_TOU_FAIL"}
end
|||

Client->"/mfa_auth": POST {"ref": reference}
alt User has one or more Security keys
    "/mfa_auth"->Client: {"payload": {"finished": false, "webauthn_options": {"publicKey": ...}}, "type": "POST_LOGIN_MFA_SUCCESS"}
else User has no security keys, third party MFA login still possible
    "/mfa_auth"->Client: {"payload": {"finished": false}, "type": "POST_LOGIN_MFA_SUCCESS"}
end

Client->"/mfa_auth": POST {"ref": reference, "webauthn_response": WEBAUTHN_RESPONSE"}
alt Success
    "/mfa_auth"->Client: {"payload": {"finished": true}, "type": "POST_LOGIN_MFA_SUCCESS"}
else Credential validation failure
    "/mfa_auth"->Client: {"error": true, "payload": {"message": ...}, "type": "POST_LOGIN_MFA_FAIL"}
end


@enduml
